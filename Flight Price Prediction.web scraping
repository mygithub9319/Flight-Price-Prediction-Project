{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c15aca24",
   "metadata": {},
   "source": [
    "### Flight Price Prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12a5c1be",
   "metadata": {},
   "source": [
    "#### Problem Statement"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16d19ec1",
   "metadata": {},
   "source": [
    "Anyone who has booked a flight ticket knows how unexpectedly the prices vary. The cheapest available ticket on a given flight gets more and less expensive over time. This usually happens as an attempt to maximize revenue based on -"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3eb90954",
   "metadata": {},
   "source": [
    "1. Time of purchase patterns (making sure last-minute purchases are expensive)\n",
    "2. Keeping the flight as full as they want it (raising prices on a flight which is filling up in order to reduce sales and hold    back inventory for those expensive last-minute expensive purchases)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b1bd898",
   "metadata": {},
   "source": [
    "So, you have to work on a project where you collect data of flight fares with other features and work to make a model to predict fares of flights. The project consists of three phases. This is the first phase which is data collection, we have to scrape at least 1500 rows of data. In this section you have to scrape the data of flights from different websites. The number of columns for data doesnâ€™t have limit. Generally, these columns areairline name, date of journey, source, destination, route, departure time, arrival time, duration, total stops and the target variable price."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "b771e58b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing Libraries/Dependencies\n",
    "import selenium\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import time\n",
    "import requests\n",
    "import re\n",
    "from selenium import webdriver \n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "from selenium.webdriver.support.ui import WebDriverWait\n",
    "from selenium.webdriver.common.action_chains import ActionChains\n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "from selenium.common.exceptions import ElementNotVisibleException\n",
    "from selenium.common.exceptions import StaleElementReferenceException, NoSuchElementException, ElementClickInterceptedException\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "13902abf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# initializing the driver to a variable\n",
    "driver = webdriver.Chrome(r\"C:\\Users\\admin\\Desktop\\Python basis\\chromedriver.exe\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "351e90ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Given URL for page\n",
    "url = 'https://www.yatra.com/'\n",
    "driver.get(url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcc2637a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "d5507d4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clicking on Search Flights button to navigate price of flight tickets\n",
    "driver.find_element_by_xpath('/html/body/div[2]/div/section/div[1]/div/div[1]/section/div/div/div/div[1]/div[3]/div[2]/input').click()\n",
    "time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "53ca9e57",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's make a list of locations to scrap data\n",
    "loc_list=['New Delhi','Mumbai','Bangalore','Chennai','Hyderabad','Goa','Kolkata','Jaipur','Lucknow']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "99e40098",
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating list to store the data\n",
    "Airline_name=[]      # The name of the airline.\n",
    "Departure_time = []  # The time when the journey starts from the source.\n",
    "Arrival_time = []    # Time of arrival at the destination.\n",
    "Duration=[]          # Total duration taken by the flight to reach the destination from the source.\n",
    "Stops = []           # Total stops between the source and destination.\n",
    "Source = []          # The source from which the service begins.\n",
    "Destination = []     # The destination where the service ends.\n",
    "Meal=[]              # Availability of meals in the flight.\n",
    "Price=[]             # The price of the flight ticket.\n",
    "Location=[]          # The location of the flights "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "9163e050",
   "metadata": {},
   "outputs": [],
   "source": [
    "# scraping the data from given URL\n",
    "#fetching webelement of source\n",
    "for x in loc_list:\n",
    "    for y in loc_list:\n",
    "        if x!=y:\n",
    "            Source = driver.find_element_by_xpath('//div[@class=\"input-holder pb-2 bdr-btm\"]/input')\n",
    "            time.sleep(2)\n",
    "            Source.clear()\n",
    "            Source.send_keys(x)\n",
    "            time.sleep(2)\n",
    "            # Fetching webelement of destination\n",
    "            Destination = driver.find_element_by_xpath(\"//div[@class='input-holder  bdr-btm pb-2']/input\")\n",
    "            Destination.click()\n",
    "            Destination.clear()\n",
    "            time.sleep(2)\n",
    "            Destination.send_keys(y)\n",
    "            time.sleep(2)\n",
    "            \n",
    "            try:\n",
    "                driver.find_element_by_xpath(\"/html/body/section[2]/section/div[1]/div/div[1]\").click()\n",
    "            except NoSuchElementException:\n",
    "                pass\n",
    "# Searching for flights again and clicking in search again button\n",
    "try:\n",
    "    srch_btn = driver.find_element_by_xpath(\"//button[@class='fs-14 btn-submit cursor-pointer bold']\")\n",
    "    wait = WebDriverWait(driver, 10)\n",
    "    wait.until(EC.visibility_of(srch_btn))\n",
    "    srch_btn.click()\n",
    "except NoSuchElementException:\n",
    "    pass\n",
    "time.sleep(2)\n",
    "\n",
    "# Scrolling the data 5000 times \n",
    "for _ in range(15):\n",
    "        time.sleep(1)\n",
    "        driver.execute_script(\"window.scrollBy(0,5000)\")\n",
    "        time.sleep(5)\n",
    "# Fetching web element of scroll to top button\n",
    "try:\n",
    "    driver.find_element_by_xpath(\"//div[@title='scroll to top']\").click()\n",
    "except NoSuchElementException:\n",
    "    pass\n",
    "# Fetching name of Airline\n",
    "try:\n",
    "    for i in driver.find_elements_by_xpath('//div[@class=\"fs-13 airline-name no-pad col-8\"]/span'):\n",
    "        Airline_name.append(i.text)\n",
    "        \n",
    "    \n",
    "except NoSuchElementException:\n",
    "    pass\n",
    "# Fetching departure time of the flights\n",
    "try:\n",
    "    for i in driver.find_elements_by_xpath('//div[@class=\"i-b pr\"]'):\n",
    "        Departure_time.append(i.text)\n",
    "except NoSuchElementException:\n",
    "    pass\n",
    "# Fetching arrival time of the flights\n",
    "try:\n",
    "    for i in driver.find_elements_by_xpath('//div[@class=\"i-b pdd-0 text-left atime col-5\"]/p[1]'):\n",
    "        Arrival_time.append(i.get_attribute(\"innerHTML\").splitlines()[0][0:5])\n",
    "except NoSuchElementException:\n",
    "    pass\n",
    "\n",
    "# Fetching Duration of flights journey\n",
    "try:\n",
    "    for i in driver.find_elements_by_xpath('//div[@class=\"stop-cont pl-13\"]/p'):\n",
    "        Duration.append(i.text)\n",
    "except NoSuchElementException:\n",
    "    pass\n",
    "\n",
    "# Fetching number of stops the flights have between source and destination\n",
    "try:\n",
    "    for i in driver.find_elements_by_xpath('//div[@class=\" font-lightgrey fs-10 tipsy i-b fs-10\"]/span[1]'):\n",
    "        Stops.append(i.text)\n",
    "except NoSuchElementException:\n",
    "    pass\n",
    "#Fetching availability of meal in flights\n",
    "try:\n",
    "    for i in driver.find_elements_by_xpath('//div[@class=\"features pull-right fs-12 flex\"]'):\n",
    "        Meal.append(i.text)\n",
    "except NoSuchElementException:\n",
    "    pass\n",
    "# Fetching Locations\n",
    "try:\n",
    "    for i in driver.find_elements_by_xpath('//p[@class=\"fs-10 font-lightgrey no-wrap city ellipsis\"]'):\n",
    "        Location.append(i.text)\n",
    "except NoSuchElementException:\n",
    "    pass\n",
    "# Fetching Prices of flight tickets\n",
    "try:\n",
    "    for i in driver.find_elements_by_xpath('//div[@class=\"i-b tipsy fare-summary-tooltip fs-18\"]'):\n",
    "        Price.append(i.text)\n",
    "except NoSuchElementException:\n",
    "    pass\n",
    "\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "2d8de873",
   "metadata": {},
   "outputs": [],
   "source": [
    "Source = Location[0:len(Location):2]\n",
    "Destination = Location[1:len(Location):2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "d77adf4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(88, 88)"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking length of source and destination\n",
    "len(Source), len(Destination)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "77d0ceb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "88 88 88 88 88 88 88\n"
     ]
    }
   ],
   "source": [
    "# Checking lengths of all features\n",
    "print(len(Price),len(Airline_name),len(Departure_time),len(Arrival_time),len(Duration),len(Stops),len(Meal))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "235b1e65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Departure_time</th>\n",
       "      <th>Time_of_arrival</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Meal_availability</th>\n",
       "      <th>Number_of_stops</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Air Asia</td>\n",
       "      <td>21:00</td>\n",
       "      <td>06:45</td>\n",
       "      <td>9h 45m</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>eCash 250</td>\n",
       "      <td>1 Stop</td>\n",
       "      <td>8,842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air Asia</td>\n",
       "      <td>08:00</td>\n",
       "      <td>17:45</td>\n",
       "      <td>9h 45m</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>eCash 250</td>\n",
       "      <td>1 Stop</td>\n",
       "      <td>9,840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Vistara</td>\n",
       "      <td>21:15</td>\n",
       "      <td>07:50</td>\n",
       "      <td>10h 35m</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Free Meal</td>\n",
       "      <td>1 Stop</td>\n",
       "      <td>9,840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Vistara</td>\n",
       "      <td>08:50</td>\n",
       "      <td>20:55</td>\n",
       "      <td>12h 05m</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Free Meal</td>\n",
       "      <td>1 Stop</td>\n",
       "      <td>9,840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Vistara</td>\n",
       "      <td>07:30</td>\n",
       "      <td>20:55</td>\n",
       "      <td>13h 25m</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Free Meal</td>\n",
       "      <td>1 Stop</td>\n",
       "      <td>9,840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>Air India</td>\n",
       "      <td>17:20</td>\n",
       "      <td>20:15</td>\n",
       "      <td>26h 55m</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Free Meal</td>\n",
       "      <td>1 Stop</td>\n",
       "      <td>23,228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>Vistara</td>\n",
       "      <td>16:05</td>\n",
       "      <td>20:55</td>\n",
       "      <td>4h 50m</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Free Meal</td>\n",
       "      <td>1 Stop</td>\n",
       "      <td>24,225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>Vistara</td>\n",
       "      <td>14:15</td>\n",
       "      <td>20:55</td>\n",
       "      <td>6h 40m</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Free Meal</td>\n",
       "      <td>1 Stop</td>\n",
       "      <td>24,225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>Air India</td>\n",
       "      <td>09:50</td>\n",
       "      <td>09:55</td>\n",
       "      <td>24h 05m</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Free Meal</td>\n",
       "      <td>1 Stop</td>\n",
       "      <td>24,593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>Air India</td>\n",
       "      <td>10:55</td>\n",
       "      <td>21:05</td>\n",
       "      <td>10h 10m</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Free Meal</td>\n",
       "      <td>2 Stop(s)</td>\n",
       "      <td>31,890</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>88 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Airline Departure_time Time_of_arrival Duration     Source Destination  \\\n",
       "0    Air Asia          21:00           06:45   9h 45m  New Delhi   Hyderabad   \n",
       "1    Air Asia          08:00           17:45   9h 45m  New Delhi   Hyderabad   \n",
       "2     Vistara          21:15           07:50  10h 35m  New Delhi   Hyderabad   \n",
       "3     Vistara          08:50           20:55  12h 05m  New Delhi   Hyderabad   \n",
       "4     Vistara          07:30           20:55  13h 25m  New Delhi   Hyderabad   \n",
       "..        ...            ...             ...      ...        ...         ...   \n",
       "83  Air India          17:20           20:15  26h 55m  New Delhi   Hyderabad   \n",
       "84    Vistara          16:05           20:55   4h 50m  New Delhi   Hyderabad   \n",
       "85    Vistara          14:15           20:55   6h 40m  New Delhi   Hyderabad   \n",
       "86  Air India          09:50           09:55  24h 05m  New Delhi   Hyderabad   \n",
       "87  Air India          10:55           21:05  10h 10m  New Delhi   Hyderabad   \n",
       "\n",
       "   Meal_availability Number_of_stops   Price  \n",
       "0          eCash 250          1 Stop   8,842  \n",
       "1          eCash 250          1 Stop   9,840  \n",
       "2          Free Meal          1 Stop   9,840  \n",
       "3          Free Meal          1 Stop   9,840  \n",
       "4          Free Meal          1 Stop   9,840  \n",
       "..               ...             ...     ...  \n",
       "83         Free Meal          1 Stop  23,228  \n",
       "84         Free Meal          1 Stop  24,225  \n",
       "85         Free Meal          1 Stop  24,225  \n",
       "86         Free Meal          1 Stop  24,593  \n",
       "87         Free Meal       2 Stop(s)  31,890  \n",
       "\n",
       "[88 rows x 9 columns]"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a dataframe for scraped data\n",
    "data = list(zip(Airline_name,Departure_time,Arrival_time,Duration,Source,Destination,Meal,Stops,Price))\n",
    "df = pd.DataFrame(data, columns = [\"Airline\",\n",
    "                                   \"Departure_time\",\n",
    "                                   \"Time_of_arrival\",\n",
    "                                   \"Duration\", \n",
    "                                   \"Source\",\n",
    "                                   \"Destination\",\n",
    "                                   \"Meal_availability\",\n",
    "                                   \"Number_of_stops\",\n",
    "                                   \"Price\"])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "f618012a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Saving the data into excel file\n",
    "df.to_excel(\"Flight_Prices.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7f5c0df",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
